# ---------------------------------------------------------------------------

#
# This file configures the New Relic Python Agent.
#
# To have the agent consult the configuration file you need to ensure
# that the "NEWRELIC_CONFIG_FILE" environment variable is set prior to
# the "newrelic.agent" Python module being imported by your application.
#
# The configuration file follows a structure similar to what you would
# find for Microsoft Windows INI files. For further information on the
# configuration file format see the Python ConfigParser documentation at:
#
#    http://docs.python.org/library/configparser.html
#
# For further discussion on the behaviour of the Python agent that can
# be configured via this configuration file see:
#
#    http://support.newrelic.com/help/kb/python/python-agent-configuration
#
# Note that for the Python agent, the licence key information is set within
# the configuration file for the local daemon process and should have been
# set when the local daemon process was installed.
#

# ---------------------------------------------------------------------------

# Here are the settings that are common to all environments.

[newrelic]

# The appplication name. Set this to be the name of your
# application as you would like it to show up in New Reli UI.
# The UI will then auto-map instances of your application into a
# entry on your home dashboard page.
app_name = nova 

# When "true", the agent collects performance data about your
# application and reports this data to the New Relic UI at
# newrelic.com. This global switch is normally overridden for
# each environment below.
monitor_mode = true

# Sets the name of a file to log agent messages to. Useful for
# debugging any issues with the agent. This is not set by
# default as it is not known in advance what user your web
# application processes will run as and where they have
# permission to write to. Whatever you set this to you must
# ensure that the permissions for the containing directory and
# the file itself are correct, and that the user that your web
# application runs as can write to the file.
log_file = /tmp/newrelic-nova.log

# Sets the level of detail of messages sent to the log file, if
# a log file location has been provided. Possible values, in
# increasing order of detail, are: "error", "warning", "info",
# "verbose", "debug" and "verbosedebug". When reporting any
# agent issues to New Relic technical support, the most useful
# setting for the support engineers is "verbosedebug". However,
# this can generate a lot of information very quickly, so it is
# best not to keep the agent at this level for longer than it
# takes to reproduce the problem you are experiencing.
#log_level = warning
log_level = verbosedebug

# Tells the transaction tracer and error collector (when
# enabled) whether or not to capture a snapshot of the WSGI
# environ dictionary passed to the WSGI application as the
# request parameters for display in the UI. When "true", it is
# still possible to exclude specific values from being captured
# using the "ignored_params" setting.
capture_params = true

# Space separated list of variables that should be removed from
# the snapshot of the WSGI application environ dictionary
# captured for display as the request parameters in the UI.
ignored_params =

# The transaction tracer captures deep information about slow
# transactions and sends this to the UI on a periodic basis. The
# transaction tracer is enabled by default. Set this to "false"
# to turn it off.
transaction_tracer.enabled = true

# Threshold in seconds for when to collect a transaction trace.
# When the response time of a controller action exceeds this
# threshold, a transaction trace will be recorded and sent to
# the UI. Valid values are any positive float value, or (default)
# "apdex_f", which will use the threshold for a dissatisfying
# Apdex controller action - four times the Apdex T value.
#transaction_tracer.transaction_threshold = apdex_f
transaction_tracer.transaction_threshold = 0

# When the transaction tracer is on, SQL statements can
# optionally be recorded. The recorder has three modes, "off"
# which sends no SQL, "raw" which sends the SQL statement in its
# original form, and "obfuscated", which strips out numeric and
# string literals.
transaction_tracer.record_sql = obfuscated

# Threshold in seconds for when to collect stack trace for a SQL
# call. In other words, when SQL statements exceed this
# threshold, then capture and send to the UI the current stack
# trace. This is helpful for pinpointing where long SQL calls
# originate from in an application.
transaction_tracer.stack_trace_threshold = 0.5

# The error collector captures information about uncaught
# exceptions or logged exceptions and sends them to UI for
# viewing. The error collector is enabled by default. Set this
# to "false" to turn it off.
error_collector.enabled = true

# To stop specific errors from reporting to the UI, set this to
# a space separated list of the Python exception type names to
# ignore.
error_collector.ignore_errors =

# Browser monitoring is the Real User Monitoring feature of the UI.
# For those Python web frameworks that are supported, this
# setting enables the auto-insertion of the browser monitoring
# JavaScript fragments.
browser_monitoring.auto_instrument = true

# ---------------------------------------------------------------------------

#
# The application environments. These are specific settings which
# override the common environment settings. The settings related to a
# specific environment will be used when the environment variable
# "NEWRELIC_ENVIRONMENT" has been defined to be either "development",
# "test", "staging" or "production" as appropriate prior to the
# "newrelic.agent" Python module being imported by your application.
#

[newrelic:development]
monitor_mode = false

[newrelic:test]
monitor_mode = false

[newrelic:staging]
app_name = Python Application (Staging)
monitor_mode = true

[newrelic:production]
monitor_mode = true

# ---------------------------------------------------------------------------

#
# Disabling builtin instrumentation. Builtin instrumentation can be
# disabled by providing a special "import-hook" section corresponding to
# the name of the module off which the import hook for instrumentation
# is triggered. The "enabled" setting should be set to "false" to
# disable the instrumenting of that module.
#
# Note that modules are only instrumented if they are actually imported
# by an application. Disabling them here will not make any difference if
# they are never imported.
#

#[import-hook:django]
#enabled = false

# ---------------------------------------------------------------------------

#
# Overriding builtin or providing user custom instrumentation. The
# default instrumentation for a module can be overriden and replaced
# with your own code for instrumenting that module, or you can provide
# code to instrument additional modules not already covered by the
# builtin instrumentation. In that case you need to also provide the
# "execute" setting to indicate the name of the module and function
# within it to call when the module is imported. This should be in the
# form "module:function". If the name of the function isn't provided and
# only the name of the module is given then the function called
# "instrument" within that module will be called. The argument to the
# function will be the instance of the module imported and which is
# named in the section. To disable the entry you can comment it out or
# set "enabled" to "false".
#
# For further information on how to implement custom instrumentation
# refer to the documentation available at:
#
#   http://support.newrelic.com/help/kb/python/adding-python-instrumentation
#

#[import-hook:django]
#enabled = true
#execute = newrelic.imports.framework.sample:instrument

# ---------------------------------------------------------------------------

#
# Additional function traces. The predefined instrumentation provided
# for frameworks will add function traces on key functions. If you want
# to quickly add additional function traces, be they within a framework
# or within your own application code, without writing a module to do
# the custom instrumentation, you can add them here in the configuration.
# The function trace node can use the name of the function called, a name
# you supply, or derived from the arguments passed to the function by
# supplying a lambda expression for deriving the name.
#
# For further explaination of the ability to define function traces in
# the configuration file see:
#
#    http://support.newrelic.com/help/kb/python/python-agent-configuration
#
# The documentation also covers how to use the configuration file to set
# up database traces, external traces, memcache traces and capture of
# exceptions.
#

[function-trace:django-template-node-render]
enabled = true
function = django.template:NodeList.render_node
name = lambda template, node, context: callable_name(node)
scope = Function
interesting = false

[function-trace:django-template-debug-node-render]
enabled = true
function = django.template.debug:DebugNodeList.render_node
name = lambda template, node, context: callable_name(node)
scope = Function
interesting = false

# ---------------------------------------------------------------------------

# Import hooks for nova.

[import-hook:nova.wsgi]
enabled = true
execute = novainstrumentation:instrument_nova_wsgi

[import-hook:nova.api.openstack.wsgi]
enabled = true
execute = novainstrumentation:instrument_nova_api_openstack_wsgi

# Now auto wrapping any controller when registered against a resource.
#
# [import-hook:nova.api.openstack.views.images]
# enabled = true
# execute = novainstrumentation:instrument_nova_api_openstack_views_images

[import-hook:nova.image.service]
enabled = true
execute = novainstrumentation:instrument_nova_image_service

[import-hook:nova.image.glance]
enabled = true
execute = novainstrumentation:instrument_nova_image_glance

[import-hook:nova.image.s3]
enabled = true
execute = novainstrumentation:instrument_nova_image_s3

[import-hook:nova.image.fake]
enabled = true
execute = novainstrumentation:instrument_nova_image_fake

[import-hook:glance.client]
enabled = true
execute = novainstrumentation:instrument_glance_client

[import-hook:nova.db.sqlalchemy.api]
enabled = true
execute = novainstrumentation:instrument_db_sqlalchemy_api

[import-hook:nova.compute.api]
enabled = true
execute = novainstrumentation:instrument_compute_api

[import-hook:nova.compute.manager]
enabled = true
execute = novainstrumentation:instrument_compute_manager

# ---------------------------------------------------------------------------
